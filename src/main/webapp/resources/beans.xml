<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

       <!--1.加载用于数据库配置的属性文件-->
       <context:property-placeholder location="classpath:db.properties" />

<!--       Spring容器优先加载由ServletContextListener（对应applicationContext.xml）产生的父容器，
而SpringMVC（对应mvc_dispatcher_servlet.xml）产生的是子容器。
子容器Controller进行扫描装配时装配的@Service注解的实例是没有经过事务加强处理，
即没有事务处理能力的Service，而父容器进行初始化的Service是保证事务的增强处理能力的。
如果不在子容器中将Service  exclude掉，此时得到的将是原样的无事务处理能力的Service，
因为在多上下文的情况下，如果同一个bean被定义两次，后面一个优先。-->
<!--       从这个理论解释spring.xml和spring-mvc.xml文件：-->
<!--       spring.xml:-->
<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
<!--<context:component-scanbase-package="com.yltd.cnyun">-->
<!--<context:exclude-filtertype="annotation"-->
<!--expression="org.springframework.stereotype.Controller"/>-->
<!--</context:component-scan>-->

       <!--2.包扫描:dao, service-->
       <context:component-scan base-package="com.fruitsalesplatform.dao"/>
       <context:component-scan base-package="com.fruitsalesplatform.db"/>
       <context:component-scan base-package="com.fruitsalesplatform.service"/>
       <context:component-scan base-package="com.fruitsalesplatform.service.impl"/>
       <context:component-scan base-package="com.fruitsalesplatform.dao.impl"/>
       <context:component-scan base-package="com.fruitsalesplatform.log"/>
       <context:component-scan base-package="com.fruitsalesplatform.mapper"/>

       <context:component-scan base-package="com.fruitsalesplatform.controller">
              <context:exclude-filter type="annotation"
                                      expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>

       <!--3.datasource数据源-->
       <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
              <property name="driverClass" value="${jdbc.driver}"/>
              <property name="jdbcUrl" value="${jdbc.url}"/>
              <property name="user" value="${jdbc.username}"/>
              <property name="password" value="${jdbc.password}"/>

              <!--连接池中保留的最大连接数。默认15-->
              <property name="maxPoolSize" value="${c3p0.pool.maxPoolSize}"/>
              <!--连接池中保留的最小连接数。默认15-->
              <property name="minPoolSize" value="${c3p0.pool.minPoolSize}"/>
              <!--初始化创建的连接数, 应在minPoolSize与maxPoolSize之间取值-->
              <property name="initialPoolSize" value="${c3p0.pool.initialPoolSize}"/>
              <!--定义从数据库获取的新连接失败后重复尝试获取的次数,默认为30-->
              <property name="acquireIncrement" value="${c3p0.pool.acquireIncrement}"/>
       </bean>

       <!--4.SessionFactory-->
       <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="datasource"/>
              <!--整合MyBatis, 包扫描Mapper文件-->
              <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
              <property name="mapperLocations" value="classpath:com/fruitsalesplatform/mapper/*.xml"/>
       </bean>

       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="basePackage" value="com.fruitsalesplatform.mapper" />
       </bean>

       <!--5.事务管理-->
       <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="datasource"/>
       </bean>

       <!--事务通知-->
       <tx:advice id ="txAdvice" transaction-manager="txManager">
              <tx:attributes>
                     <tx:method name="insert*" propagation="REQUIRED"/>
                     <tx:method name="update*" propagation="REQUIRED"/>
                     <tx:method name="delete*" propagation="REQUIRED"/>
                     <tx:method name="save*" propagation="REQUIRED"/>
                     <tx:method name="find*" propagation="REQUIRED"/>
                     <tx:method name="get*" propagation="REQUIRED"/>
                     <tx:method name="view*" propagation="REQUIRED"/>
              </tx:attributes>
       </tx:advice>
       <aop:config>
              <aop:pointcut id="txPointcut" expression="execution(* com.fruitsalesplatform.service.*.*(..))"/>
              <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
        </aop:config>

       <!--1.开启注解AOP-->
       <aop:aspectj-autoproxy/>
</beans>